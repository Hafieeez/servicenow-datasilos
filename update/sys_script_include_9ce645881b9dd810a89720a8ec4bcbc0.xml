<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.Maintenance</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The Maintenance funtion is used to update records in supported tables based on the current values in fields. Essentially the Maintenance function iterates over all records in the tables and simulates a change to each record. It is used to initialize records after inital installation or when specific silo configuration changes were made. It is recommended to trigger the Maintenance function on a regular basis. A GlideRecord object can be provided to choose a specific table and a predefined filter. If no GlideRecord object is provided the function will iterate over all tables and all records in one go.</description>
        <name>Maintenance</name>
        <script><![CDATA[function Maintenance(grFilter,strTopic)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var RenderValue = x_snc_devtools.RenderValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	
	strTopic = GetStringValue(strTopic);
	if (strTopic != '')
	{
		strTopic += ': ';
	}
	
	function Log(strText)
	{
		x_snc_datasilos.Log('Maintenance: '+strTopic+strText);
	}
	function Debug(strText)
	{
		x_snc_datasilos.Debug('Maintenance: '+strTopic+strText);
	}

	Log('START');
	var nTotalChanges = 0;
	var nTotalRows = 0;
	var aGlideRecordFilters = [];

	if (IsValidRecord(grFilter))
	{
		if (IsTableSupported(grFilter.getRecordClassName()) == false)
		{
			Log('ERROR: provided grFilter refers to an unsupported class.');
		}
		aGlideRecordFilters.push(grFilter);
	}
	else
	{
		var aClassNames = GetAllSupportedTables();
		//Debug(RenderValue(aClassNames));
		for (var nIndex = 0; nIndex < aClassNames.length; nIndex++)
		{
			var grToAdd = new GlideRecord(aClassNames[nIndex]);
			aGlideRecordFilters.push(grToAdd);
		}
	}

	
	var nLogFrequency = GetConfigValue('maintenance','log_frequency');
	
	var aResults = [];
	
	for (var nIndex = 0; nIndex < aGlideRecordFilters.length; nIndex++)
	{
		var result = {};
		var grCurrent = aGlideRecordFilters[nIndex];
		var strCurrentClassName = grCurrent.getRecordClassName();
		//Debug('Working on '+grCurrent.getRecordClassName());
		
		//Debug('Query: '+grCurrent.getEncodedQuery());
		
		grCurrent.query();
		//Debug('Records found: '+grCurrent.getRowCount());

		var nCurrentRows = grCurrent.getRowCount();
		
		if (nLogFrequency > 0 && nCurrentRows >= nLogFrequency)
		{
			var strLog = 'Starting to process '+nCurrentRows+' record(s) in '+strCurrentClassName+'.';
			Log(strLog);
		}
		
		var nCurrentRow = 1;
		var nCurrentChanges = 0;
		
		while (grCurrent.next())
		{
			var strWhitelistHashOld = RecordGetWhitelistHash(grCurrent);
			//Debug('Before RecordUpdate: '+strWhitelistHashOld);
			RecordUpdate(grCurrent);
			var strWhitelistHashNew = RecordGetWhitelistHash(grCurrent);
			//Debug('After RecordUpdate: '+strWhitelistHashNew);
			if (strWhitelistHashOld != strWhitelistHashNew)
			{
				grCurrent.update();
				nCurrentChanges++;
			}
			
			if (nCurrentRow > 0 && nLogFrequency > 0)
			{
				if (nCurrentRow % nLogFrequency == 0)
				{
					var strLog = 'Processing record '+nCurrentRow+' of '+nCurrentRows+' in '+strCurrentClassName+' and made '+nCurrentChanges+' changes so far.';
					Log(strLog);
				}
			}
			nCurrentRow++;
		}
		result.rows = nCurrentRows;
		nTotalRows += result.rows;
		result.changes = nCurrentChanges;
		nTotalChanges += nCurrentChanges;
		result.classname = strCurrentClassName;
		aResults.push(result);
		
		if (nLogFrequency > 0 && nCurrentRows >= nLogFrequency && aGlideRecordFilters.length > 1)
		{
			var strLog = 'Processed '+nCurrentRows+' record(s) in '+strCurrentClassName+' and made '+nCurrentChanges+' changes.';
			Log(strLog);
		}
	}

	var strLog = 'END\n';
	for (var nIndex = 0; nIndex < aResults.length; nIndex++)
	{
		var result = aResults[nIndex];
		strLog += 'Changed '+result.changes+' out of '+result.rows+' records in '+result.classname+'.\n';
	}
	strLog += 'Changed '+nTotalChanges+' out of '+nTotalRows+' records in total.';
	Log(strLog);
	
    return nTotalChanges;

}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-04 15:41:42</sys_created_on>
        <sys_id>9ce645881b9dd810a89720a8ec4bcbc0</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>Maintenance</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_9ce645881b9dd810a89720a8ec4bcbc0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-11-24 17:06:17</sys_updated_on>
    </sys_script_include>
</record_update>
