<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.AccessAnalysis</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Performs an analysis on a list of users against a list of records. Can these users see these records?</description>
        <name>AccessAnalysis</name>
        <script><![CDATA[function AccessAnalysis(aUsers,records)
{
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetGroupsFromUser = x_snc_devtools.GetGroupsFromUser;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var GetUserRecord = x_snc_devtools.GetUserRecord;
	var GetKeys = x_snc_devtools.GetKeys;
	var GetValue = x_snc_devtools.GetValue;
	var RenderValue = x_snc_devtools.RenderValue;
	var PerformanceQuery = x_snc_devtools.PerformanceQuery;
	var GetRecord = x_snc_devtools.GetRecord;
	var GetRolesFromUser = x_snc_devtools.GetRolesFromUser;
	var IsValidColumn = x_snc_devtools.IsValidColumn;

	var result = {};
	
	result.users = [];
	
	aUsers = GetArrayValue(aUsers);
	for (var nUser = 0; nUser < aUsers.length; nUser++)
	{
		var strUser = aUsers[nUser];
		var user = {};
		user.sys_id = '';
		
	
		var grUser = GetUserRecord(strUser);
		if (grUser != false)
		{
			var strUserSysId = GetStringValue(grUser.sys_id);
			user.sys_id = strUserSysId;
		
			user.user_name = GetStringValue(grUser.user_name);
			user.name = GetStringValue(grUser.name);

			user.groups = [];
			var aGroups = GetGroupsFromUser(strUserSysId);
			for (var nGroup = 0; nGroup < aGroups.length; nGroup++)
			{
				var strGroupSysId = aGroups[nGroup];
				var group = {};
				group.sys_id = strGroupSysId;
				var grGroup = new GlideRecord('sys_user_group');
				if (grGroup.get(strGroupSysId))
				{
					group.name = GetStringValue(grGroup.name);
					group.active = GetBoolValue(grGroup.active);
				}
				else
				{
					group.name = 'INVALID';
				}


				user.groups.push(group);
			}

			user.supervisor_silos = [];
			var aSilos = GetSilosFromUserByTypes(strUserSysId,['supervisor']);
			for (var nSilo = 0; nSilo < aSilos.length; nSilo++)
			{
				var strSiloSysId = aSilos[nSilo];
				var silo = {};
				silo.sys_id = strSiloSysId;
				var grSilo = new GlideRecord('x_snc_datasilos_datasilos');
				if (grSilo.get(strSiloSysId))
				{
					silo.name = GetStringValue(grSilo.getValue('name'))
				}
				else
				{
					silo.name = 'INVALID';
				}
				user.supervisor_silos.push(silo);
			}

			user.fulfiller_silos = [];
			var aSilos = GetSilosFromUserByTypes(strUserSysId,['fulfiller']);
			for (var nSilo = 0; nSilo < aSilos.length; nSilo++)
			{
				var strSiloSysId = aSilos[nSilo];
				var silo = {};
				silo.sys_id = strSiloSysId;
				var grSilo = new GlideRecord('x_snc_datasilos_datasilos');
				if (grSilo.get(strSiloSysId))
				{
					silo.name = grSilo.getValue('name')
				}
				else
				{
					silo.name = 'INVALID';
				}
				user.fulfiller_silos.push(silo);
			}

			user.member_silos = [];
			var aSilos = GetSilosFromUserByTypes(strUserSysId,['member']);
			for (var nSilo = 0; nSilo < aSilos.length; nSilo++)
			{
				var strSiloSysId = aSilos[nSilo];
				var silo = {};
				silo.sys_id = strSiloSysId;
				var grSilo = new GlideRecord('x_snc_datasilos_datasilos');
				if (grSilo.get(strSiloSysId))
				{
					silo.name = grSilo.getValue('name')
				}
				else
				{
					silo.name = 'INVALID';
				}
				user.member_silos.push(silo);
			}
	
			
			
			user.admin = false;
			user.sentinel = false;
			var aRoles = GetRolesFromUser(strUserSysId);
			for (var nRole = 0; nRole < aRoles.length; nRole++)
			{
				var strRoleSysId = aRoles[nRole];
				var grRole = GetRecord('sys_user_role',strRoleSysId);
				if (grRole != false)
				{
					if (grRole.name == 'admin')
					{
						user.admin = true;
					}
					if (grRole.name == 'x_snc_datasilos.sentinel')
					{
						user.sentinel = true;
					}
				}
				
			}
			 
			
			user.tables = {};
			var aTables = GetKeys(records);
			for (var nTable = 0; nTable < aTables.length; nTable++)
			{
				var strTable = aTables[nTable];
				var aRecordSysIds = GetArrayValue(GetValue(records,strTable));
		
				var aUserColumns = GetArrayValue(GetConfigValue('tables',strTable,'columns','instant_access','sys_user'));
				Debug(aUserColumns);
				
				var aRecords = [];
				for (var nRecord = 0; nRecord < aRecordSysIds.length; nRecord++)
				{
					var strRecordSysId = aRecordSysIds[nRecord];
					var record = {};

					var grRecord = GetRecord(strTable,strRecordSysId);
					if (grRecord == false)
					{
						record.sys_id = 'invalid';
						record.explanation = 'Record does not exist.';
					}
					else
					{
						record.sys_id = strRecordSysId;
						record.display = grRecord.getDisplayValue();
						//record.summary = RecordGetSummary(grRecord);
						if (IsValidColumn(strTable,'short_description'))
						{
							record.short_description = GetStringValue(grRecord.short_description);
						}
						var queryresult = PerformanceQuery('', strTable, 'sys_id='+strRecordSysId, '', 1, strUserSysId, 0);
						var nRecordsFound = queryresult.records;
						var bAccess = (nRecordsFound == 1)?(true):(false);
						record.access = bAccess;
					
						record.global = RecordGetGlobalValue(grRecord);
						record.supervisor_whitelist = RecordGetSupervisorWhitelistValue(grRecord);
						record.fulfiller_whitelist = RecordGetFulfillerWhitelistValue(grRecord);
						record.group_whitelist = RecordGetGroupWhitelistValue(grRecord);
					
						// Get the reason for visibility
						var strExplanation = '';
						var nReasons = 0;
						if (bAccess == true)
						{
							strExplanation += 'User '+user.user_name+' ('+strUserSysId+') can see the record because:';
							if (IsActive() == false)
							{
								strExplanation += '\nDataSilos is inactive.';
								nReasons++;
							}
							var strSupportedTable = GetSupportedTable(strTable);
							if (IsTableActive(strSupportedTable) == false)
							{
								strExplanation += '\nThe filtering on the supported table ['+strSupportedTable+'] is inactive.';
								nReasons++;
							}
							if (user.admin == true)
							{
								strExplanation += '\nThe user has the admin role.';
								nReasons++;
							}
							if (user.sentinel == true)
							{
								strExplanation += '\nThe user has the sentinel role.';
								nReasons++;
							}
							if (record.global == true)
							{
								strExplanation += '\nThe record is globally visible.';
								nReasons++;
							}
							
							for (var nSilo = 0; nSilo < user.supervisor_silos.length; nSilo++)
							{
								if (record.supervisor_whitelist.indexOf(user.supervisor_silos[nSilo].sys_id) != -1)
								{
									strExplanation += '\nSupervisor silo '+user.supervisor_silos[nSilo].name+' is whitelisted.';
									nReasons++;
								}
							}
							
							for (var nSilo = 0; nSilo < user.fulfiller_silos.length; nSilo++)
							{
								if (record.fulfiller_whitelist.indexOf(user.fulfiller_silos[nSilo].sys_id) != -1)
								{
									strExplanation += '\nFulfiller silo '+user.fulfiller_silos[nSilo].name+' is whitelisted.';
									nReasons++;
								}
							}

							for (var nGroup = 0; nGroup < user.groups.length; nGroup++)
							{
								if (record.group_whitelist.indexOf(user.groups[nGroup].sys_id) != -1)
								{
									strExplanation += '\nGroup '+user.groups[nGroup].name+' is whitelisted.';
									nReasons++;
								}
							}
							
							for (var nUserColumn = 0; nUserColumn < aUserColumns.length; nUserColumn++)
							{
								var strUserColumn = aUserColumns[nUserColumn];
								if (user.sys_id == GetStringValue(grRecord.getValue(strUserColumn)))
								{
									strExplanation += '\nThe user is directly associated to the record in column "'+strUserColumn+'".';
									nReasons++;
								}
							}
						
							if (nReasons == 0)
							{
								strExplanation += '\nNo reason was found why the user should see the record. That indicates a technical defect!';
							}
							else
							{
								strExplanation += '\nFound '+nReasons+' reason(s) why the user can see the record.';
							}
						
						}
						else
						{
							strExplanation += 'User '+user.user_name+' ('+strUserSysId+') can NOT see the record.';
						}
						record.explanation = strExplanation;
					}
						
					aRecords.push(record);
				}
				user.tables[strTable] = aRecords;
			}
		}
		else
		{
			user.name = 'INVALID';
		}

		result.users.push(user);
	}

	return result;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-27 14:00:33</sys_created_on>
        <sys_id>47e091541b0ee814a89720a8ec4bcb3a</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>AccessAnalysis</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_47e091541b0ee814a89720a8ec4bcb3a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-10-25 09:35:32</sys_updated_on>
    </sys_script_include>
</record_update>
