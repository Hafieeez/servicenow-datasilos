<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>2</order>
        <snapshot/>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-05 09:45:52</sys_created_on>
        <sys_id>805ff4981b1d1c10a89720a8ec4bcbb7</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_atf_step_805ff4981b1d1c10a89720a8ec4bcbb7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-02 11:20:46</sys_updated_on>
        <table/>
        <test display_value="DataSilos - Maintenance">780fb0981b1d1c10a89720a8ec4bcb47</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=805ff4981b1d1c10a89720a8ec4bcbb7"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>805ff4981b1d1c10a89720a8ec4bcbb7</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-05 09:45:52</sys_created_on>
        <sys_id>5fef7c981b1d1c10a89720a8ec4bcbd7</sys_id>
        <sys_mod_count>26</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-02 11:20:46</sys_updated_on>
        <value>var strLog = '';&#13;
function Log(strText)&#13;
{&#13;
	strLog = strLog + "\n" + strText;&#13;
}&#13;
(function(outputs, steps, stepResult, assertEqual)&#13;
{&#13;
	var RenderValue = x_snc_devtools.RenderValue;&#13;
	var testdata = new DataSilosTestDataAPI('_ATF_DATASILOS_');&#13;
&#13;
	var bResult = true;&#13;
	&#13;
	function TestCase_Maintenance(vInputFilter, vExpected)&#13;
	{&#13;
		Log('TestCase_Maintenance');&#13;
		var strFilterClassName = '';&#13;
		if (vInputFilter != undefined)&#13;
		{&#13;
			strFilterClassName = vInputFilter.getRecordClassName();&#13;
		}&#13;
		Log('Class name: '+strFilterClassName);&#13;
		Log('Expected: '+RenderValue(vExpected));&#13;
		var vResult = Maintenance(vInputFilter);&#13;
		Log('Result  : '+RenderValue(vResult));&#13;
		if (vResult != vExpected)&#13;
		{&#13;
			bResult = false;&#13;
			Log('Test case FAILED');&#13;
		}&#13;
		Log('');&#13;
	}&#13;
	&#13;
/*&#13;
This code shall help to test the Maintenance() function.&#13;
The function is supposed to be called every minute and shall cover all potentially affected records. So we're talking about huge amounts of records. So the function should work in smaller batches and stop if too much time went by. The next run will then pick up the work where it has been left by the previous one. The GlideRecord parameter can be used to narrow down the scope of records that should be processed. The only purpose of this is to be able to test specific scenarios. The three parts refelct the three requirements. Add and modify test data to simulate these cases. You can also add test steps to check specific values in the modified records.&#13;
*/	&#13;
&#13;
	// Prepare test data&#13;
	testdata.CreateUser('CALLER');&#13;
	testdata.CreateUser('ALBERT');&#13;
	var strGroupAlphaSysId = testdata.CreateGroup('ALPHA',['ALBERT']);&#13;
	var strIncidentSysId = testdata.CreateIncident('TEST_1','CALLER','');&#13;
	var strChangeRequestSysId = testdata.CreateChangeRequest('TEST_1','CALLER','');&#13;
	var strProblemSysId = testdata.CreateProblem('TEST_1','CALLER','');&#13;
&#13;
	&#13;
	var grIncidentFilter = new GlideRecord('incident');&#13;
	grIncidentFilter.addQuery('short_description','STARTSWITH',testdata.GetPrefix());&#13;
&#13;
	var grChangeRequestFilter = new GlideRecord('change_request');&#13;
	grChangeRequestFilter.addQuery('short_description','STARTSWITH',testdata.GetPrefix());&#13;
&#13;
	var grProblemFilter = new GlideRecord('problem');&#13;
	grProblemFilter.addQuery('short_description','STARTSWITH',testdata.GetPrefix());&#13;
	&#13;
	&#13;
	// Prepare an incident with an empty whitelist&#13;
	var grIncident1 = new GlideRecord('incident');&#13;
	if (grIncident1.get(strIncidentSysId))&#13;
	{&#13;
		grIncident1.assignment_group = strGroupAlphaSysId;&#13;
		grIncident1.x_snc_datasilos_group_whitelist = '';&#13;
		grIncident1.update();&#13;
	}&#13;
		&#13;
	TestCase_Maintenance(grIncidentFilter,1);&#13;
&#13;
	/*&#13;
	var grIncident1 = new GlideRecord('incident');&#13;
	if (grIncident1.get(strIncidentSysId))&#13;
	{&#13;
		Log(RenderValue(grIncident1));&#13;
	}&#13;
	*/&#13;
&#13;
	&#13;
	// Prepare a change request with an empty whitelist&#13;
	var grChangeRequest1 = new GlideRecord('change_request');&#13;
	if (grChangeRequest1.get(strChangeRequestSysId))&#13;
	{&#13;
		grChangeRequest1.assignment_group = strGroupAlphaSysId;&#13;
		grChangeRequest1.x_snc_datasilos_group_whitelist = '';&#13;
		grChangeRequest1.update();&#13;
	}&#13;
		&#13;
	TestCase_Maintenance(grChangeRequestFilter,1);&#13;
&#13;
	&#13;
	// Prepare a problem with an empty whitelist&#13;
	var grProblem1 = new GlideRecord('problem');&#13;
	if (grProblem1.get(strProblemSysId))&#13;
	{&#13;
		grProblem1.assignment_group = strGroupAlphaSysId;&#13;
		grProblem1.x_snc_datasilos_group_whitelist = '';&#13;
		grProblem1.update();&#13;
	}&#13;
		&#13;
	TestCase_Maintenance(grProblemFilter,1);&#13;
	&#13;
&#13;
	// TODO: Add a scenario to cover a group that is added to a silo AFTER the record has been initialized&#13;
		&#13;
	stepResult.setOutputMessage(strLog);&#13;
	return bResult;&#13;
	&#13;
})(outputs, steps, stepResult, assertEqual);</value>
        <variable display_value="">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>805ff4981b1d1c10a89720a8ec4bcbb7</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-05 09:45:52</sys_created_on>
        <sys_id>97ef7c981b1d1c10a89720a8ec4bcbd7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-05 09:45:52</sys_updated_on>
        <value>3.1</value>
        <variable display_value="">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
